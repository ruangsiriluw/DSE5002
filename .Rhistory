stringsAsFactor = FALSE,
sep = "\\|"
)
sales_pipe <- read.delim("Week_2/Data/sales_pipe.txt",
stringsAsFactor = FALSE,
sep = "\|"
?"|"
?"'"
sales_pipe <- read.delim("Week_2/Data/sales_pipe.txt",
stringsAsFactor = FALSE,
sep = "\"|"
)
sep = "\"|""
sales_pipe <- read.delim("Week_2/Data/sales_pipe.txt",
sales_pipe <- read.delim ("Week_2/Data/sales_pipe.txt",
stringsAsFactor = FALSE,
sep = "\""
)
sep = "\"""
sep = "\|
sales_pipe <- read.delim ("Week_2/Data/sales_pipe.txt",
stringsAsFactor = FALSE,
sep = "\|
sales_pipe <- read.delim ("Week_2/Data/sales_pipe.txt",
stringsAsFactor = FALSE,
sep = "\|"
sales_pipe <- read.delim ("Week_2/Data/sales_pipe.txt",
stringsAsFactor = FALSE,
sep = '\|'
sales_pipe <- read.delim ("Week_2/Data/sales_pipe.txt",
stringsAsFactor = FALSE,
sep = '\|'
sales_pipe <- read.delim ("Week_2/Data/sales_pipe.txt",
stringsAsFactor = FALSE,
sep = "\'|'"
)
sales_pipe <- read.delim ("Week_2/Data/sales_pipe.txt",
stringsAsFactor = FALSE,
sep = "\'|'"
)
sales_pipe <- read.delim ("Week_2/Data/sales_pipe.txt",
stringsAsFactor = FALSE
)
sales_pipe <- read.delim ("Week_2/Data/sales_pipe.txt",
stringsAsFactor = FALSE,
sep = "|"
)
sales_pipe <- read.delim ("Week_2/Data/sales_pipe.txt",
stringsAsFactor = FALSE,
sep = "|"
)
sales_pipe <- read.delim ("Week_2/Data/sales_pipe.txt",
stringsAsFactor = FALSE,
sep = "\|"
sales_pipe <- read.delim ("Week_2/Data/sales_pipe.txt",
stringsAsFactor = FALSE,
sep = ""
)
sales_pipe <- read.delim("Week_2/Data/sales_pipe.txt",
stringsAsFactor = FALSE,
sep = "[|]"
)
sales_pipe <- read.delim("Week_2/Data/sales_pipe.txt",
stringsAsFactor = FALSE,
sep = "|"
)
sales_pipe <- read.delim("Week_2/Data/sales_pipe.txt",
stringsAsFactor = FALSE,
sep = "\|"
sales_pipe <- read.delim("Week_2/Data/sales_pipe.txt",
stringsAsFactor = FALSE,
sep = "|"
)
sales_pipe <- read.delim("Week_2/Data/sales_pipe.txt",
stringsAsFactor = FALSE,
sep = \"|"
sales_pipe <- read.delim("Week_2/Data/sales_pipe.txt",
stringsAsFactor = FALSE,
sep = "\|"
sales_pipe <- read.delim("Week_2/Data/sales_pipe.txt",
stringsAsFactor = FALSE,
sep = "\\|"
)
sales_pipe <- read.table("Week_2/Data/sales_pipe.txt",
stringsAsFactor = FALSE,
sep = "\\|"
)
sales_pipe <- read.delim("Week_2/Data/sales_pipe.txt",
stringsAsFactor = FALSE,
sep = "|"
)
library(stringr)
sales_pipe_delmt <- read.delim("Week_2/Data/sales_pipe.txt",
stringsAsFactor = FALSE,
sep = "|"
)
sales_pipe_delmt <- read.delim("Week_2/Data/sales_pipe.txt",
sep = "|",
stringsAsFactor = FALSE,
)
sales_pipe_delmt <- read.delim("Week_2/Data/sales_pipe.txt",
sep = "|",
stringsAsFactor = FALSE
)
sales_pipe_delmt <- read.delim("Week_2/Data/sales_pipe.txt",
sep = "|",
stringsAsFactor = FALSE
)
sales_pipe_delmt <- read.delim("Week_2/Data/sales_pipe.txt",
sep = "|",
stringsAsFactor = FALSE
)
sales_pipe_delmt <- read.delim("Week_2/Data/sales_pipe.txt"
,stringsAsFactor = FALSE
,sep = "|"
)
library(stringr)
library(lubridate)
library(dplyr)
install.packages("lubridate")
library(lubridate)
library(forcats)
install.packages("forcats")
library(forcats)
library(forcats)
setwd("...")
setwd("Week_2")
setwd("Week_2/Data")
setwd("..")
sales <- read.delim("Week_2/Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
)
sales <- read.delim("~/DSE5002/Week_2/Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
sales <- read.delim("~/DSE5002/Week_2/Data/sales_pipe.txt"
# Your code here
library(stringr)
library(lubridate)
library(forcats)
sales <- read.delim("~/DSE5002/Week_2/Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
)
setwd("~/DSE5002")
sales_pipe_delmt <- read.delim("Week_2/Data/sales_pipe.txt"
,stringsAsFactor = FALSE
,sep = "|"
)
library(stringr)
library(lubridate)
library(forcats)
sales <- read.delim("Week_2/Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
sales <- read.delim("Week_2/Data/sales_pipe.txt"
setwd("..")
sales <- read.delim("Week_2/Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
)
sales <- read.delim("~/DSE5002/Week_2/Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
)
sales <- read.delim("Week_2/Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
)
sales <- read.delim("DSE5002/Week_2/Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
)
library(stringr)
library(lubridate)
library(forcats)
# Your code here
setwd("..")
sales <- read.delim("Week_2/Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
)
library(stringr)
library(lubridate)
library(forcats)
# Your code here
sales <- read.delim("Week_2/Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
)
colnames()
colnames(sales)
```{r}
sales <- read.delim("Week_2/Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
today()
gc()
today()
today()
now()
ymd(20101215)
mdy("4/1/17")
hour()
bday <- dmy(09261974)
bday <- dmy("09261974")
bday <- dmy("26091974")
month(bday)
wday(bday)
wday(bday, label = TRUE)
time <- ymd_hms("2010-12-13 03:00:30")
with_tz (time, "America/Chicago")
?with_tz
with_tz (time, "America/Los_Angeles")
?force_tz
time <- ymd_hms("2010-12-13 03:00:30", tz = "America/Los_Angeles")
with_tz (time, "America/Chicago")
with_tz (time, "America/Boston")
with_tz (time, "America/New_York")
with_tz (time, "Japan/Tokyo")
?intervals
?durations
ymd(c("2010-10-10", "bananas"))
ymd(c("2010-10-10"))
ymd(c("2010-10-10", "2010-11-11"))
d1 <- "January 1, 2010"
ymd(d1)
month(d1)
d1 <- ymd("January 1, 2010")
d1 <- ymd(010110)
d1 <- ymd(100101)
d2 <- ymd(2015-Mar-07)
d2 <- ymd("2015-Mar-07")
d3 <- dmy("06-Jun-2017")
d1 <- ymd("January 1, 2010")
d1 <- mdy("January 1, 2010")
d4 <- mdy(c("August 19 (2015)", "July 1 (2015)"))
d5 <- mdy("12/30/14") # Dec 30, 2014
ydm_h(d1)
ydm_h(d1,
quiet = TRUE,
tz = "UTC",
locale = Sys.getlocale("LC_TIME"),
truncated = 0
)
ydm_h(d1,
quiet = FALSE,
tz = "UTC",
locale = Sys.getlocale("LC_TIME"),
truncated = 0
)
wday(d1)
wday(d1, label = TRUE)
?wday
wday(d1, label = FALSE)
wday(d1, label = TRUE)
wday(d1, label = TRUE, abbr = TRUE)
wday(d1, label = TRUE, abbr = FALSE)
rnorm(10)
# Random Normal Distribution -----------------------------------------------------
# random number generator using a normal (Bell curve) distribution
rnorm(10) # mean = 0, standard deviation = 1
# grab some names
source("makeChickWeight.R") # popular names for chickens
# creates a data.frame with ranked names
# used by data.frame merge example
chicknames <-
structure(
list(
rank = 1:50,
name = c(
"Sophia",
"Emma",
"Olivia",
"Isabella",
"Ava",
"Mia",
"Emily",
"Abigail",
"Madison",
"Elizabeth",
"Charlotte",
"Avery",
"Sofia",
"Chloe",
"Sammy",
"Harper",
"Bryce",
"Aubrey",
"Addison",
"Evelyn",
"Andrew",
"Stephen",
"Hannah",
"Zoey",
"Daniel",
"Lillian",
"Dennis",
"Brooklyn",
"Samantha",
"Todd",
"Zoe",
"Michael",
"Audrey",
"Allison",
"Anna",
"Savannah",
"Aaliyah",
"Gabriella",
"Camila",
"Aria",
"Kaylee",
"Scarlett",
"Hailey",
"Arianna",
"Riley",
"Peter",
"Nevaeh",
"Sarah",
"Hulk",
"Sadie"
)
),
.Names = c("rank", "name"),
row.names = c(NA, 50L),
class = "data.frame"
)
View(chicknames)
install.packages("clipr")
libray(clipr)
libray("clipr")
libray(clipr)
library(clipr)
clip_write("This is a test")
write_clip("This is a test")
numericVector
# create a numeric vector with 100 random uniform values between 1 and 256
numericVector <- runif(100, min = 1, max = 256 )
?runif
numericVector
# cut the vector into 3 buckets
cut(numericVector, 3)
# cut the vector into 3 buckets labeled low, med, and high
cut(numericVector, 3, labels = c("low","med","high"))
# cut the vector into 3 buckets labeled 1, 2, and 3
cut(numericVector, 3, labels = FALSE)
# cut the vector into buckets with these breakpoints
cut(numericVector,breaks = c(1,100,200,256))
# create some data
data("ChickWeight")
# split chickweight into buckets by chick
byChick <- split(ChickWeight, ChickWeight$Chick)
View(byChick)
# split chickweight into buckets by diet
byDiet <- split(ChickWeight, ChickWeight$Diet)
View(byDiet)
# create a vector with chickweights
Weights <- ChickWeight$weight
head(Weights)
# then split weights into 4 buckets
split(Weights, 1:4)
# then split weights into 4 buckets
split(Weights, 1:4)
numericVector <- runif(100, min = 1, max = 256 )
cut(numericVector, 4)
split(numericVector, 1:4)
# This is new in 5.0, so check your version
R.Version()
# simple example. Note return of TRUE, FALSE and NA
askYesNo("Do you like brussels sprouts?")
# simple example. Note return of TRUE, FALSE and NA
askYesNo("Do you like brussels sprouts?")
# simple example. Note return of TRUE, FALSE and NA
askYesNo("Do you like brussels sprouts?")
# Changing the prompts - but not the return values
askYesNo("Do you like brussels sprouts?", prompts = "Y/N/C")
# Change the default response
askYesNo("Do you like brussels sprouts?", prompts = "Y/N/C", default = FALSE)
# tricky use of AskYesNo for 3 values - but watch the return value
askYesNo("Which is your favorite?", prompts = "Carrots/Brussels Sprouts/Onions")
# tricky use of AskYesNo for 3 values - but watch the return value
askYesNo("Which is your favorite?", prompts = "Carrots/Brussels Sprouts/Onions")
# tricky use of AskYesNo for 3 values - but watch the return value
askYesNo("Which is your favorite?", prompts = "Carrots/Brussels Sprouts/Onions")
ifelse(askYesNo("Do you like brussels sprouts?", prompts = "Y/N/C"),
"positive result",
"negative result"
)
ifelse(askYesNo("Do you like brussels sprouts?", prompts = "Y/N/C"),
"positive result",
"negative result"
)
ifelse(askYesNo("Do you like brussels sprouts?", prompts = "Y/N/C"),
"positive result",
"negative result"
)
# create some data to work with
data("ChickWeight")
# create ThreeWeights because conditional density plots require a factor
ThreeWeights <- cut(ChickWeight$weight, 3, labels = c(34, 148, 260))
# create the plot
cdplot(ChickWeight$Time, ThreeWeights)
cdplot(ChickWeight$Time, ThreeWeights,
main = "How much should a chick weigh?",
ylab = "Probable Weight",
xlab = "Days"
cdplot(ChickWeight$Time, ThreeWeights)
# create ThreeWeights because conditional density plots require a factor
ThreeWeights <- cut(ChickWeight$weight, 3, labels = c(34, 148, 260))
# create the plot
cdplot(ChickWeight$Time, ThreeWeights)
# add meaning to the plot
cdplot(ChickWeight$Time, ThreeWeights,
main = "How much should a chick weigh?",
ylab = "Probable Weight",
xlab = "Days"
)
# alternative notation, plot weight against Time in Chickweight dataset
cdplot(factor(weight) ~ Time, data = ChickWeight)
# add meaning to the alternative notation, cut weight into 6 buckets
# 1-6 at 62
cdplot(factor(cut(weight, 6, labels = 1:6 * 62)) ~ Time,
data = ChickWeight,
main = "How much should a chick weigh?",
ylab = "Weight",
xlab = "Days"
)
library(fortune)
install.packages("fortunes")
library(fortunes)
fortune()
allfortunes <- read.fortunes()
library(praise)
# Description: base graphics: boxplot
ChickWeight
boxplot(ChickWeight)
boxplot(weight ~ Diet, data = ChickWeight)
boxplot(ChickWeight$Diet)
boxplot(weight ~ Diet, data = ChickWeight)
boxplot(ChickWeight$weight, ChickWeight$Diet)
?boxplot
boxplot(weight ~ Diet, data = ChickWeight) #plotting weight against Diet
boxplot(weight ~ Diet, data = ChickWeight, horizontal = TRUE)
#simple example
boxplot(mtcars$mpg)
# Comparing one value to another with alternative notation
boxplot(mpg ~ cyl, data = mtcars, col = "lightgray", varwidth = TRUE,
main = "mpg vs cylinders",
ylab = "mpg",xlab = "cylinders")
# the numbers used to create the boxplot
fivenum(mtcars$mpg)
# simple example
hist(ChickWeight$weight)
# changing the pattern of the histogram bars
hist(ChickWeight$weight, density = 30)
# Control where the histogram breaks occur
hist(ChickWeight$weight, density = 30, breaks = c(0,100,200,max(ChickWeight$weight)))
# changing the pattern of the histogram bars
hist(ChickWeight$weight, density = 30)
# Control where the histogram breaks occur
hist(ChickWeight$weight, density = 30, breaks = c(0,100,200,max(ChickWeight$weight)))
# Another example of controlling the breaks
hist(ChickWeight$weight, breaks = fivenum(ChickWeight$weight))
fivenum(ChickWeight$weight)
# Simple example
# ~ is "against"
# | is "break by (conditional)"
coplot(ChickWeight$weight ~ ChickWeight$Time | ChickWeight$Diet)
# alternative notation using data
coplot(weight ~ Time | Diet, data = ChickWeight)
# controlling the layout
coplot(weight ~ Time | Diet, data = ChickWeight, columns = 4)
# using panel to control what is graphed in each panel
coplot(weight ~ Time | Diet, data = ChickWeight,
panel = function(x,y,...) { abline(lm(y ~ x)) })
remove.packages("fortunes")
# cowsay ------------------------------------------------------------------
install.packages("cowsay")
install.packages("cowsay")
library(cowsay)
# simple example
say("Why so serious?", by="cow")
# what animals are available?
names(animals)
say("i am a whale", by="whale")
# Special cases
say("futurama",by=sample(names(animals),1))
say("dexter",by=sample(names(animals),1))
# discover other special cases by examining the source code
say
say("simpsons", by= "cow")
say("loremipsum", by= "cow")
say("Hello World", by= "endlesshorse")
# Special cases
say("futurama",by=sample(names(animals),1))
# Show count of each factor
table(ChickWeight$Diet)
# use dnn to title the table. One dnn label per factor
table(ChickWeight$Diet,  dnn = "Observations per diet")
with(ChickWeight, table(weight, Diet,
dnn = c("cweight", "cDiet"))
)
library(cowsay)
say("Why so serious?", by="cow")
ls("package:cowsay") # reveals objects inside of package
# looking inside of the function
say # reveals code of function
ls("package:cowsay") # reveals objects inside of package
endless_horse()
?cowsay::animals # help file for that object
str(animals) # STRucture of an object
