View(sales)
library(stringr)
library(lubridate)
library(forcats)
sales <- read.delim("Week_2/Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
,fileEncoding = "WINDOWS-1252"
)
sales <- read.delim("Week_2/Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
,fileEncoding = "WINDOWS-1252"
)
sales <- read.delim("Week_2/Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
)
View(sales)
View(sales)
emp.data <- data.frame(
emp_id = c (1:5),
emp_name = c("Rick","Dan","Michelle","Ryan","Gary"),
salary = c(623.3,515.2,611.0,729.0,843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11",
"2015-03-27"), format = '%Y-%m-%d'),
stringsAsFactors = FALSE
)
sales_csv <- read.csv("Week_2/Data/sales.csv"
,stringsAsFactors=FALSE
)
################################### Factors ##################################
# Check whether Region is a factor & find the unique values.
is.factor(sales_csv$Region)
unique(sales_csv$Region)
test <- unique(sales_csv$Region)
test
test <- unique(sales_csv$Region) == "West"
remove(test)
sales <- read.delim("Week_2/Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
,fileEncoding = "WINDOWS-1252"
)
sales <- read.delim("Week_2/Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
,fileEncoding = "WINDOWS-1252"
)
sales <- read.delim("Week_2/Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
)
str(sales)
colnames(sales) [1] = "Row.ID"
str(sales)
str(sales)
is.Date(sales$Order.Date)
sales$Order.Date <- as.Date(sales$Order.Date
,format='%m/%d/%Y'
)
sales$Ship.Date <- as.Date(sales$Ship.Date
,format='%B %d %Y'
)
oldest_order <- min(sales$Order.Date)
newest_order <- max(sales$Order.Date)
day_diff <- difftime(newest_order, oldest_order,
units = "days")
print(day_diff)
wk_diff <- difftime(newest_order, oldest_order,
units = "weeks")
print(wk_diff)
# For years, redo with interval and divided by yrs
str(day_diff)
difftime(newest_order, oldest_order,
units = "weeks")
day_intv <- interval(newest_order, oldest_order)
numdays <- as.numeric(newest_order - oldest_order)
numdays
str(numdays)
duration(numdays, "days")
str(numdays)
numdays
difftime(newest_order, oldest_order,
units = "days")
#for weeks change unit to weeks
difftime(newest_order, oldest_order,
units = "weeks")
as.period(day_intv) / years(1)
# Ex 5===========
#create matrix with customer name only and split into first and last name
uniq_customer <- unique(sales$Customer.Name)
uniq_customer
cust_firstlast <- stringr::str_split_fixed(string = uniq_customer
, pattern = " ", n=2)
View(cust_firstlast)
unique(cust_firstlast)
bill_only <- unique(cust_firstlast)
first_unq <- unique(cust_firstlast)
remove(bill_only)
View(cust_firstlast)
View(cust_firstlast)
bill <- uniq_customer == "Bill"
length(bill == TRUE)
bill
bill <- str_like(string = uniq_customer
, pattern = "Bill"
, ignore_case = TRUE)
View(first_unq)
bill <- str_like(string = uniq_customer
, pattern = "Bill"
, ignore_case = FALSE)
bill
bill <- str_like(string = uniq_customer
, pattern = "Bill%"
)
bill <- str_like(string = uniq_customer
, pattern = "bill%"
)
bill
length(bill)
length(bill == TRUE)
length(bill = TRUE)
count(bill == TRUE)
remmove(bill)
remove(bill)
first_unq <- unique(cust_firstlast == "Bill")
first_unq <- unique([cust_firstlast == "Bill", ])
bill_only <- str_subset(string = cust_firstlast
, pattern == "Bill")
bill_only <- str_subset(string = cust_firstlast
, pattern == "bill")
cust_firstlast <- str_split_fixed(string = uniq_customer
, pattern = " ", n=2)
bill_only <- str_subset(string = cust_firstlast
, pattern = "bill")
length(bill_only)
bill_only <- str_subset(string = cust_firstlast
, pattern = "Bill")
length(bill_only)
sales$Customer.Name <- str_to_lower(string = sales$Customer.Name
, locale = "en")
uniq_customer <- unique(sales$Customer.Name)
cust_firstlast <- str_split_fixed(string = uniq_customer
, pattern = " ", n=2)
bill_only <- str_subset(string = cust_firstlast
, pattern = "bill")
length(bill_only)
firstname <- sales$Customer.First == "Bill"
length(firstname[firstname == TRUE])
irstname <- sales$Customer.First == "bill"
length(firstname[firstname == TRUE])
test_bill <- sales$Customer.First == "bill
length(firstname[firstname == TRUE])
length([test_bill == TRUE])
View(first_unq)
# DO NOT NEED THIS:  Subsetting Bill into vector, then count length where
test_bill <- cust_firstlast == "bill"
#--- Fixing------need to pull out 'table', but need to lower case first Ex6====
sales$Product.Name <- str_to_lower(sales$Product.Name)
View(sales)
match_table <- str_match(string = sales$Product.Name, pattern = "table")
length(match_table)
match_table <- str_match_all(string = sales$Product.Name, pattern = "table")
length(match_table)
View(first_unq)
View(first_unq)
remove(first_unq)
View(match_table)
length(match_table[value = "table"])
length(which(match_table[value = "table"]))
length(which(match_table = "table"))
length(which(match_table == "table"))
length(which(cust_firstlast == "bill"))
remove(bill_only)
cust_firstlast <- str_split_fixed(string = uniq_customer
, pattern = " ", n=2)
length(which(cust_firstlast == "bill"))
View(match_table)
levels(sales$State)
is.factor(sales$State)
sales$State <- factor(sales$State)
is.factor(sales$State)
levels(sales$State)
str(sales$State)
levels(sales$State)
statetable <- table(sales$State)
statetable
# Ex 10======================
sales$Order.Year <- format(sales$Order.Date, "%Y")
View(sales)
aggregate(x = sales$Profit, by = list(sales$Order.Year), FUN = "mean")
remove(firstname, irstname)
test_vector <- c(1,5,11:22)
x %in% test_vector | y %in% test_vector | z %in% test_vector
x <- 10
y <- 5
z <- 20
(x < z) & (x > y)
x & y != z
x + 2*y == z
test_vector <- c(1,5,11:22)
x %in% test_vector | y %in% test_vector | z %in% test_vector
logical_vector <- (x == test_vector) | (y == test_vector) | (z == test_vector)
test_vector[logical_vector]
which(x == test_vector) | (y == test_vector) | (z == test_vector)
which((x == test_vector) | (y == test_vector) | (z == test_vector))
library(stringr)
library(lubridate)
library(forcats)
# Your code here
setwd("..")
sales <- read.delim("Week_2/Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
)
# Your code here
colnames(sales) [1] = "Row.ID"
str(sales)
sales$Ship.Date <- as.Date(sales$Ship.Date
, format = "%m/%d/%Y")
setwd("..")
sales <- read.delim("Week_2/Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
)
```
colnames(sales) [1] = "Row.ID"
str(sales)
sales$Ship.Date <- as.Date(sales$Ship.Date
, format = "%B %d %Y")
sales$Order.Date <- as.Date(sales$Order.Date
, format = "%m/%d/%Y")
recent_order <- min(sales$Order.Date)
oldest_order <- max(sales$Order.Date)
duration(recent_order - oldest_order, units = "days")
duration(recent_order, oldest_order, units = "days")
difftime(recent_order, oldest_order,
units = "days")
difftime(oldest_order,recent_order,
units = "days")
num_yrs <- time_length(num_days)
time_length(difftime(oldest_order,recent_order))
time_length(difftime(oldest_order,recent_order), "years")
num_days <- difftime(oldest_order,recent_order,
units = "days")
num_days <- difftime(oldest_order,recent_order,
units = "days")
num_yrs <- time_length(difftime(oldest_order,recent_order), "years")
num_days <- difftime(oldest_order,recent_order,
units = "days")
num_wks <- difftime(oldest_order,recent_order,
units = "weeks")
print(num_days, num_wks, num_yrs)
print(num_days)
difftime(oldest_order,recent_order,
units = "days")
difftime(oldest_order,recent_order,
units = "weeks")
time_length(difftime(oldest_order,recent_order), "years")
print(num_days)
print(num_wks)
print(num_yrs)
difftime(oldest_order,recent_order,
units = "days")
#number of weeks
difftime(oldest_order,recent_order,
units = "weeks")
#number of years
time_length(difftime(oldest_order,recent_order), "years")
mean(sales$Order.Date - sales$Ship.Date)
mean(sales$Ship.Date - sales$Order.Date)
sales$Ship.Date - sales$Order.Date
mean(sales$Ship.Date - sales$Order.Date)
tolower(sales$Customer.Name)
sales$Customer.Name <- tolower(sales$Customer.Name)
View(sales)
uniq_customer <- unique(sales$Customer.Name)
length(which(uniq_customer == "bill"))
cust_firstlast <- str_split_fixed(string = uniq_customer
, pattern = " ", n=2)
length(which(cust_firstlast == "bill"))
View(cust_firstlast)
View(sales)
sales$Product.Name <- tolower(sales$Product.Name)
View(sales)
str_match_all(string = sales$Product.Name, pattern = "table")
match_table <- str_match_all(string = sales$Product.Name, pattern = "table")
View(match_table)
which(match_table == "table")
str_count(match_table == "table")
str_count(sales$Product.Name == "table")
length(which(sales$Product.Name == "table"))
length(str_count(sales$Product.Name == "table"))
length(match_table == "table"))
length(match_table == "table")
length(which(match_table == "table"))
split_table <- str_split(string = sales$Product.Name, pattern = "table")
View(split_table)
split_table <- str_split(string = sales$Product.Name, pattern = " ")
length(which(split_table == "table"))
str_count(split_table, pattern = "table")
sum(str_count(split_table, pattern = "table"))
match_table <- str_match_all(string = sales$Product.Name, pattern = "table")
length(which(match_table == "table"))
sum(str_count(split_table, pattern = "table"))
sapply(list = split_table, function(x) str_count(x, "table"))
sapply(list = split_table, function = "table")
sapply(list = split_table, FUN ="table")
split_table <- str_split(string = sales$Product.Name, pattern = " ")
sum(str_count(split_table, pattern = "table"))
# Your code here
sales$State <- factor(sales$State)
is.factor(sales$State)
levels(sales$State)
statetable <- table(sales$State)
print(statetable)
statetable <- table(sales$State
, colnames("Counts.State"))
state_df <- data.frame(sales$State)
View(state_df)
statetable <- table(state_df)
print(statetable)
levels(sales$State)
statetable <- table(state_df)
print(statetable)
# Your code here
sales_tx_df = sales[sales$State == "Texas"]
# Your code here
sales_tx_df = sales[sales$State == "Texas", ]
sales$Category <- factor(sales$Category)
levels(sales$Category)
levels(sales_tx_df$Category)
sales_tx_df$Category <- factor(sales_tx_df$Category)
levels(sales_tx_df$Category)
barplot(sales_tx_df$Category)
barplot(sales_tx_df, sales_tx_df$Category)
barplot(sales_tx_df$Category)
barplot(table(sales_tx_df$Category))
# Your code here
?aggregate
aggregate(sales$Profit, list(sales$Region), mean)
prof_reg <- aggregate(x= sales$Profit, by = list(sales$Region)
, FUN = mean)
setNames(prof_reg, c("Profit", "Region"))
setNames(prof_reg, c("Region", "Profit"))
setNames(prof_reg, c("Region", "Avg.Profit"))
View(sales)
sales$Order.Year <- format(sales$Order.Date, "%Y")
avg_prof_yr <- aggregate(x = sales$Profit, by = list(sales$Order.Year)
, FUN = mean)
avg_prof_yr
setNames(avg_prof_yr, c("Year", Avg.Profit))
setNames(avg_prof_yr, c("Year", "Avg.Profit"))
statetable <- table(sales$State)
print(statetable)
################################if else################################
y1 <- c('Apple',"Orange","Bananna")
if("Mango" %in% y1) {
print("Mango is found")
} else {
print("Mango is not found")
}
if("Mango" %in% y1) {
print("Mango is found")
} else if('Bananna' %in% y1){
print("Bananna is found")
} else {
print('Mango and Bananna is not found')
}
ifelse('Mango' %in% y1        # condition
,"Mango is found"      # value if true
,"Mango is not found"  # value if false
)
ifelse('Mango' %in% y1                            # condition
,"Mango is found"                          # value if true
,ifelse('Bananna' %in% y1                  # else if condition (if 1st is false)
,'Bananna is found'                # 2nd value if true
,'Mango and Bananna is not found'
ifelse('Mango' %in% y1                            # condition
ifelse('Mango' %in% y1                            # condition
,"Mango is found"                          # value if true
,ifelse('Bananna' %in% y1                  # else if condition (if 1st is false)
,'Bananna is found'                # 2nd value if true
,'Mango and Bananna is not found'  # value if both are false
)
)
for(i in 1:10) { # Head of for-loop
x1 <- i^2      # Code block
print(x1)      # Print results
}
for(i in 1:10) { # Head of for-loop
x1 <- i^2      # Code block
print(x1)      # Print results
}
x2 <- c("Samsung", "Apple", "Meta", "Google", "Microsoft")  # Create character vector
for(i in x2) {     # Loop over character vector
print(paste("The name", i, "consists of", nchar(i), "characters."))
}
x3 <- numeric()
for(i in 1:10) {    # Head of for-loop
x3 <- c(x3, i^2)  # Code block
}
print(x3)
print(x3)
x4 <- character()                                          # Create empty data object
loop_work <- 0
for(i in 1:5) {                                            # Head of first for-loop
for(j in 1:5) {                                          # Head of nested for-loop
loop_work <- loop_work + 1
x4 <- c(x4, paste(LETTERS[i], letters[j], sep = "_"))  # Code block
}
}
library(hash)
install.packages("hash")
### A better way using hashing --> this is on almost every tech interview
library(hash)
library(stringr)
library(lubridate)
library(forcats)
sales <- read.delim("Week_2/Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
)
str(sales)
colnames(sales) [1] = "Row.ID"
sales$Order.Date <- as.Date(sales$Order.Date
,format='%m/%d/%Y'
)
sales$Ship.Date <- as.Date(sales$Ship.Date
,format='%B %d %Y'
)
ldest_order <- min(sales$Order.Date)
newest_order <- max(sales$Order.Date)
#change unit of difftime to days, weeks (but no years)
difftime(newest_order, oldest_order,
units = "days")
time_length(difftime(oldest_order,newest_order), "years")
numdays <- as.numeric(newest_order - oldest_order)
oldest_order <- min(sales$Order.Date)
remove(ldest_order)
sales$Product.Name <- str_to_lower(sales$Product.Name)
View(sales)
match_table <- str_match_all(string = sales$Product.Name, pattern = "table")
length(which(match_table == "table"))
split_table <- str_split(string = sales$Product.Name, pattern = " ")
sum(str_count(split_table, pattern = "table"))
View(match_table)
View(split_table)
View(match_table)
length(which(match_table == "table"))
str_count(split_table, pattern = "table")
?grep
sum(str_count(split_table, pattern = "table"))
length(which(match_table == "table"))
View(match_table)
View(sales)
?write.csv
?grep
grep(pattern = "table", sales$Product.Name)
test <- grep(pattern = "table", sales$Product.Name)
length(testa)
length(test)
library(stringr)
library(lubridate)
library(forcats)
# Your code here
setwd("..")
sales <- read.delim("Week_2/Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
)
colnames(sales) [1] = "Row.ID"
str(sales)
sales$Ship.Date <- as.Date(sales$Ship.Date
, format = "%B %d %Y")
sales$Order.Date <- as.Date(sales$Order.Date
, format = "%m/%d/%Y")
recent_order <- min(sales$Order.Date)
oldest_order <- max(sales$Order.Date)
difftime(oldest_order,recent_order,
units = "days")
#number of weeks
difftime(oldest_order,recent_order,
units = "weeks")
#number of years
time_length(difftime(oldest_order,recent_order), "years")
mean(sales$Ship.Date - sales$Order.Date)
sales$Customer.Name <- tolower(sales$Customer.Name)
uniq_customer <- unique(sales$Customer.Name)
cust_firstlast <- str_split_fixed(string = uniq_customer
, pattern = " ", n=2)
length(which(cust_firstlast == "bill"))
grep(pattern = "bill", uniq_customer)
length(grep(pattern = "bill", uniq_customer))
length(grep(pattern = "bill", uniq_customer))
sales$Product.Name <- tolower(sales$Product.Name)
length(grep(pattern = "table", sales$Product.Name))
sales$State <- factor(sales$State)
levels(sales$State)
statetable <- table(sales$State)
print(statetable)
sales_tx_df = sales[sales$State == "Texas", ]
sales_tx_df$Category <- factor(sales_tx_df$Category)
barplot(table(sales_tx_df$Category))
prof_reg <- aggregate(x= sales$Profit, by = list(sales$Region)
, FUN = mean)
setNames(prof_reg, c("Region", "Avg.Profit"))
sales$Order.Year <- format(sales$Order.Date, "%Y")
avg_prof_yr <- aggregate(x = sales$Profit, by = list(sales$Order.Year)
, FUN = mean)
setNames(avg_prof_yr, c("Year", "Avg.Profit"))
